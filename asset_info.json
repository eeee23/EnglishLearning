{"id": 51522861, "name": "newest", "category": 1, "type": "run", "description": "", "user_id": 16032923, "thumbnail": null, "xml": "import pygame\nimport sys\nimport getpass\nimport json\nfrom lists import *\nfrom main_requests import *\nfrom transp import *\n# \u521d\u59cb\u5316pygame\npygame.init()\nprint(\"\\033[32m\u6ce8\uff1a\u6b64\u5904\u8f93\u51fa\u7684\u70b9\u51fb\u60c5\u51b5\u662f\u6839\u636e\u5361\u7247\u800c\u5b9a\\033[0m\")\n# \u8bbe\u7f6e\u5c4f\u5e55\u5c3a\u5bf8\nSCREEN_WIDTH = 660\nSCREEN_HEIGHT = 480\nscreen = pygame.display.set_mode([SCREEN_WIDTH, SCREEN_HEIGHT], pygame.DOUBLEBUF)\npygame.display.set_caption(\"\u7528\u6237\u4e2d\u5fc3\")\nclock = pygame.time.Clock()\n# \u8bbe\u7f6e\u989c\u8272\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nBLUE = (0,0,255)\nGREEN = (0,255,0)\nRED = (255,0,0)\nBACKGROUND = (255, 255, 205)\n# \u8bbe\u7f6e\u5b57\u4f53\nfont = pygame.font.Font(\"\u5b57\u9b42\u767d\u9e3d\u5929\u884c\u4f53.ttf\", 30)\n# \u5f53\u524d\u7528\u6237\ncurrent_user = {\"username\": getpass.getuser()} if getpass.getuser() else None  # \u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u767b\u5f55\u7684\u7528\u6237\u540d\n#\u5e38\u91cf\nbeisong = False\nfh = False\nsearch_t = False\nrectangles = []\n#\u5b9a\u4e49\ndef bar(num):\n    if num <= 1000:\n        message = \"\u4f60\u80cc\u4e86{}\u4e2a\u5355\u8bcd\uff0c\u4f60\u624d\u521a\u521a\u5f00\u59cb\u80cc\u5355\u8bcd\uff0c\u52a0\u6cb9\uff01\".format(num)\n        progress = \"{}/1000\".format(num)\n    else:\n        message = \"\u4f60\u80cc\u4e86{}\u4e2a\u5355\u8bcd\uff0c\u4f60\u80cc\u5355\u8bcd\u7684\u6570\u91cf\u5df2\u7ecf\u8d85\u8fc7\u4e2d\u56fd99.9999%\u7684\u4eba\uff0c\u52a0\u6cb9\uff01\".format(num)\n        progress = \"{}/{}\".format(num, num)\n    return message\ndef bar1(num):\n    if num <= 1000:\n        message = \"\u4f60\u80cc\u4e86{}\u4e2a\u5355\u8bcd\uff0c\u4f60\u624d\u521a\u521a\u5f00\u59cb\u80cc\u5355\u8bcd\uff0c\u52a0\u6cb9\uff01\".format(num)\n        progress = \"{}/1000\".format(num)\n    else:\n        message = \"\u4f60\u80cc\u4e86{}\u4e2a\u5355\u8bcd\uff0c\u4f60\u80cc\u5355\u8bcd\u7684\u6570\u91cf\u5df2\u7ecf\u8d85\u8fc7\u4e2d\u56fd99.9999%\u7684\u4eba\uff0c\u52a0\u6cb9\uff01\".format(num)\n        progress = \"{}/{}\".format(num, num)\n    return progress\ndef clear_screen():\n    screen.fill(WHITE)\ndef write(texts,file_name):\n    erjinzhi = []\n    for i in texts:\n        erjinzhi.append(str(ord(i)))  # \u5c06\u6574\u6570\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    with open(file_name, 'a+') as f:\n        f.write(','.join(erjinzhi) + '|')  # \u4f7f\u7528\u9017\u53f7\u5c06\u6574\u6570\u5217\u8868\u8fde\u63a5\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u6dfb\u52a0\u5206\u9694\u7b26\ndef read(file_name):\n    try:\n        with open(file_name, 'r') as f:\n            content = f.read()  # \u8bfb\u53d6\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\n            int_lists = []\n            for line in content.split('|'):\n                if line.strip():  # \u8df3\u8fc7\u7a7a\u884c\n                    int_list = [int(num) for num in line.split(',')]  # \u89e3\u6790\u6bcf\u884c\u7684\u5185\u5bb9\u4e3a\u6574\u6570\u5217\u8868\n                    int_lists.append(int_list)\n            return int_lists\n    except FileNotFoundError:\n        print(\"\u6587\u4ef6\u4e0d\u5b58\u5728\uff01\")\n        return []\n    except Exception as e:\n        print(\"\u8bfb\u53d6\u6587\u4ef6\u65f6\u51fa\u73b0\u9519\u8bef\uff1a\", e)\n        return []\ndef decode_read(lists):\n    t_lists = []\n    for int_list in lists:\n        t_list = []\n        for i in int_list:\n            t_list.append(chr(i))\n        t_lists.append(''.join(t_list))\n    return t_lists\ndef draw_user_center():\n    global tlist\n    screen.fill(WHITE)\n    draw_text(\"\u7528\u6237\u4e2d\u5fc3\", font, BLACK, 300, 50)\n    if current_user:\n        draw_text(\"\u6b22\u8fce\u56de\u6765\uff0c\" + current_user[\"username\"], font, BLACK, 250, 150)\n        draw_text(str(bar(len(tlist))),font,(255,0,0),30,350)\n        draw_text(str(bar1(len(tlist))),font,(255,0,0),300,400)\n    else:\n        draw_text(\"\u672a\u767b\u5f55\", font, BLACK, 250, 150)\n\n    if current_user:\n        logout_button = pygame.Rect(250, 250, 140, 32)\n        draw_text(\"\u6ce8\u9500\", font, BLACK, 285, 255)\n    else:\n        logout_button = pygame.Rect(250, 250, 140, 32)\n        draw_text(\"\u767b\u5f55\", font, BLACK, 285, 255)\n\n    back_button = pygame.Rect(250, 300, 140, 32)\n    draw_text(\"\u8fd4\u56de\", font, BLACK, 285, 305)\n\n    pygame.display.flip()\n\n    return logout_button, back_button  # \u8fd4\u56de\u6ce8\u9500\u6309\u94ae\u5bf9\u8c61\u548c\u8fd4\u56de\u6309\u94ae\u5bf9\u8c61\n\ndef draw_text(text, font, color, x, y):\n    text_surface = font.render(text, True, color)\n    text_rect = text_surface.get_rect()\n    text_rect.topleft = (x, y)\n    screen.blit(text_surface, text_rect)\n\ndef logout():\n    global current_user\n    current_user = None\n    print(\"\u6ce8\u9500\u6210\u529f\uff01\")\n    draw_user_center()\n\ndef login():\n    global current_user\n    current_user = {\"username\": getpass.getuser()} if getpass.getuser() else None\n    print(\"\u767b\u5f55\u6210\u529f\uff01\")\n    draw_user_center()\ndef back():\n    global rectangles, user_center_shown, beisong, search_t\n    clear_screen()\n    #\u7ed8\u5236\u5361\u7247\n    for rect_info in rectangles:\n        pygame.draw.rect(screen, [255, 0, 0], rect_info[\"rect\"], 0)\n        pygame.draw.rect(screen, [0, 0, 0], rect_info[\"rect\"].inflate(3, 3), 3)\n        text = font.render(tlist[rectangles.index(rect_info)], True, (255, 255, 255))\n        text_rect = text.get_rect(center=rect_info[\"rect\"].center)\n        screen.blit(text, text_rect)\n    # \u663e\u793a\u7528\u6237\u4e2d\u5fc3\u6309\u94ae\n    draw_text(\"\u7528\u6237\u4e2d\u5fc3\", font, BLACK, 535, 15)\n    draw_text(\"\u9996\u9875\", font, BLACK, 20, 15)\n    draw_text(\"\u5355\u8bcd\u80cc\u8bf5\", font, BLACK, 100, 15)\n    draw_text(\"\u9000\u51fa\", font, BLUE, 250, 15)\n    user_center_shown = False\n    beisong = False\n    search_t = False\n    pygame.display.update()\n# \u4e3b\u5faa\u73af\ndef main():\n    #\u5e38\u91cf\n    input_text = ''\n    x = 450\n    tlist = []\n    tlist = decode_read(read(\"jizhu.pc3\"))\n    nojizhu = decode_read(read(\"nojizhu.pc3\"))\n    trans = \"\"\n    dh = len(tlist)\n    print(dh)\n    if tlist == ['']:\n        tlist = [\"\u8bf7\u53bb\u80cc\u8bf5\u5355\u8bcd\"]\n    print(tlist)\n    letter_num = 0\n    last_letter_x = 265\n    global beisong,rectangles,fh,search_t\n    search_t = False\n    original_page_shown = False\n    # if dh > 7:\n    #     dh = 7\n    clock = pygame.time.Clock()\n    # \u8bb0\u5f55\u5361\u7247\u7684\u539f\u59cb\u4f4d\u7f6e\n    original_positions = []\n    #\u7ed8\u5236\u5361\u7247\n    for i in range(dh):\n        rect = pygame.Rect(x, 150, 200, 300)\n        pygame.draw.rect(screen, [255, 0, 0], rect, 0)\n        pygame.draw.rect(screen, [0, 0, 0], rect.inflate(3, 3), 3)\n        text = font.render(tlist[i], True, (255, 255, 255))\n        text_rect = text.get_rect(center=rect.center)\n        screen.blit(text, text_rect)\n        rectangles.append({\"rect\": rect, \"clicked\": False})\n        original_positions.append(rect.topleft)  # \u4fdd\u5b58\u5361\u7247\u7684\u539f\u59cb\u4f4d\u7f6e\n        x -= 20\n        \n\n    pygame.display.flip()\n    #\u9996\u9875\u6309\u94ae\u7ed8\u5236\n    draw_text(\"\u9996\u9875\", font, BLACK, 20, 15)\n    user_center_button = pygame.Rect(500, 10, 140, 32)  # \u79fb\u52a8\u7528\u6237\u4e2d\u5fc3\u6309\u94ae\u5230\u5c4f\u5e55\u4e0a\u65b9\n    user_center_button_copy = pygame.Rect(500, 10, 140, 32)\n    draw_text(\"\u7528\u6237\u4e2d\u5fc3\", font, BLACK, 535, 15)  # \u8c03\u6574\u7528\u6237\u4e2d\u5fc3\u6309\u94ae\u7684\u4f4d\u7f6e\n    dcbs = pygame.Rect(75, 10, 140, 32)\n    draw_text(\"\u5355\u8bcd\u80cc\u8bf5\", font, BLACK, 100, 15)\n    user_center_shown = False  # \u6807\u8bb0\u7528\u6237\u4e2d\u5fc3\u662f\u5426\u5df2\u663e\u793a\n    fanhui = pygame.Rect(425, 435, 140, 32)\n    draw_text(\"\u9000\u51fa\", font, BLUE, 250, 15)\n    tuichu = pygame.Rect(215, 10, 140, 32)\n    tc = pygame.Rect(215, 10, 140, 32)\n    jzl = pygame.Rect(235, 85, 140, 32)\n    searcht = pygame.Rect(570, 20, 140, 32)\n    mjz = pygame.Rect(395, 155, 140, 32)\n    while True:\n        if beisong:\n            # \u5728\u8f93\u5165\u6846\u4e2d\u663e\u793a\u8f93\u5165\u7684\u6587\u672c\n            draw_text(input_text, font, BLACK, 122, 20)\n            pygame.display.update()  # \u66f4\u65b0\u5c4f\u5e55\u663e\u793a \n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                pygame.quit()\n                sys.exit()\n            #\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                mouse_pos = pygame.mouse.get_pos()\n                #\u5224\u65ad\u70b9\u51fb\u5361\u7247\u529f\u80fd\n                for rect_info in rectangles:\n                    if rect_info[\"rect\"].collidepoint(mouse_pos):\n                        print(\"\u70b9\u51fb\u4e86\u67d0\u5f20\u5361\u7247\")\n                        rect_info[\"clicked\"] = not rect_info[\"clicked\"]\n                        if not rect_info[\"clicked\"] and rect_info[\"rect\"].left < 400:\n                            rect_info[\"rect\"].topleft = original_positions[rectangles.index(rect_info)]\n                        break\n                else:\n                    print(\"\u70b9\u51fb\u4e86\u7a7a\u767d\u5904\")\n                    for rect_info in rectangles:\n                        if rect_info[\"rect\"].left < 400:\n                            rect_info[\"rect\"].topleft = original_positions[rectangles.index(rect_info)]\n                #\u70b9\u51fb\u7528\u6237\u4e2d\u5fc3\n                if user_center_button.collidepoint(mouse_pos):\n                    user_center_shown = True\n                #\u7528\u6237\u754c\u9762\u903b\u8f91\n                if user_center_shown:\n                    logout_button, back_button = draw_user_center()\n                    if logout_button.collidepoint(mouse_pos):\n                        if current_user:\n                            logout()\n                        else:\n                            login()\n                    elif back_button.collidepoint(mouse_pos):\n                        user_center_shown = False\n                #\u70b9\u51fb\u5355\u8bcd\u80cc\u8bf5\n                if dcbs.collidepoint(mouse_pos):\n                    beisong = True\n                #\u70b9\u51fb\u8fd4\u56de\n                elif fanhui.collidepoint(mouse_pos):\n                    back()\n                    tuichu.clamp_ip(tc)\n                    user_center_button.clamp_ip(user_center_button_copy)\n                    # print(tuichu)\n                #\u70b9\u51fb\u9000\u51fa\n                elif tuichu.collidepoint(mouse_pos):\n                    sys.exit()\n                #\u70b9\u51fb\u641c\u7d22\n                elif searcht.collidepoint(mouse_pos):\n                    print(translate(input_text))\n                    draw_text(trans, font, BLUE, 270, 60)\n                    pygame.display.update()\n                    search_t = True\n                    draw_text(\"\u8bb0\u4f4f\u4e86\uff1f\", font, BLUE, 230, 160)\n                    jzl = pygame.Rect(195, 155, 140, 32)\n                    draw_text(\"\u6ca1\u8bb0\u4f4f\uff1f\", font, BLUE, 430, 160)\n                    mjz = pygame.Rect(395, 155, 140, 32)\n                    trans = translate(input_text)\n                #\u70b9\u51fb\u8bb0\u4f4f\u4e86\n                elif jzl.collidepoint(mouse_pos):\n                    print(\"\u60a8\u5df2\u8bb0\u4f4f\u6b64\u5355\u8bcd:\",input_text)\n                    write(input_text,\"jizhu.pc3\")\n                elif mjz.collidepoint(mouse_pos):\n                    print(\"\u5df2\u8bb0\u5f55\u6b64\u5355\u8bcd:\",input_text)\n                    write(input_text,\"nojizhu.pc3\")\n            elif event.type == pygame.KEYDOWN:\n                if inp_en.collidepoint(mouse_pos):\n                    if event.key >= pygame.K_a and event.key <= pygame.K_z:\n                        # \u6dfb\u52a0\u6309\u4e0b\u7684\u5b57\u6bcd\u5230\u8f93\u5165\u6587\u672c\u4e2d\n                        input_text += chr(event.key)\n                        print(chr(event.key))\n                    elif event.key == pygame.K_MINUS:\n                        print(\"-\")\n                        input_text +=\"-\"\n                        # letter_num+=1\n                        # last_letter_x = 265+letter_num*10\n                    elif event.key == pygame.K_BACKSPACE:\n                        if len(input_text) > 0:\n                            input_text = input_text[:-1]\n                    elif event.key == pygame.K_SPACE:\n                        input_text+=\" \"\n                    elif event.unicode.isalpha():\n                        # \u6dfb\u52a0\u6309\u4e0b\u7684\u5b57\u6bcd\u5230\u8f93\u5165\u6587\u672c\u4e2d\n                        input_text += event.unicode\n                    else:\n                        print(\"\u65e0\u6548\u5b57\u7b26\")\n        if beisong:\n            # \u5728\u8f93\u5165\u6846\u4e2d\u663e\u793a\u8f93\u5165\u7684\u6587\u672c\n            clock.tick(2)\n            draw_text(input_text, font, BLACK, 122, 20)\n            pygame.display.update()  # \u66f4\u65b0\u5c4f\u5e55\u663e\u793a\n        # \u66f4\u65b0\u5361\u7247\u7684\u4f4d\u7f6e\n        for rect_info in rectangles:\n            if rect_info[\"clicked\"]:\n                if rect_info[\"rect\"].left > 0:\n                    rect_info[\"rect\"].move_ip(-5, 0)  # \u5411\u5de6\u79fb\u52a8 5 \u50cf\u7d20\n        # \u6e05\u7a7a\u5c4f\u5e55\n        screen.fill([255, 255, 205])\n        if nojizhu != ['']:\n            pygame.draw.circle(screen, GREEN, (315, 20),5, 0)\n            draw_text(\"\u4f60\u8fd8\u6709\"+str(len(nojizhu))+\"\u4e2a\u5355\u8bcd\u6ca1\u80cc\u4f1a,\u70b9\u6211\u67e5\u770b\",pygame.font.Font(\"\u5b57\u9b42\u767d\u9e3d\u5929\u884c\u4f53.ttf\",15),GREEN,320,15)\n        # \u91cd\u65b0\u7ed8\u5236\u5361\u7247\n        for rect_info in rectangles:\n            pygame.draw.rect(screen, [255, 0, 0], rect_info[\"rect\"], 0)\n            pygame.draw.rect(screen, [0, 0, 0], rect_info[\"rect\"].inflate(3, 3), 3)\n            text = font.render(tlist[rectangles.index(rect_info)], True, (255, 255, 255))\n            text_rect = text.get_rect(center=rect_info[\"rect\"].center)\n            screen.blit(text, text_rect)\n\n        # \u663e\u793a\u7528\u6237\u4e2d\u5fc3\u6309\u94ae\n        draw_text(\"\u7528\u6237\u4e2d\u5fc3\", font, BLACK, 535, 15)\n        draw_text(\"\u9996\u9875\", font, BLACK, 20, 15)\n        draw_text(\"\u5355\u8bcd\u80cc\u8bf5\", font, BLACK, 100, 15)\n        draw_text(\"\u9000\u51fa\", font, BLUE, 250, 15)\n        # \u663e\u793a\u7528\u6237\u4e2d\u5fc3\u754c\u9762\n        if user_center_shown:\n            draw_user_center()\n        #\u663e\u793a\u80cc\u8bf5\u9875\u9762\n        if beisong:\n            tuichu.move_ip(900,0)\n            user_center_button.move_ip(900,0)\n            # print(tuichu)\n            screen.fill(BACKGROUND)\n            #\u8f93\u5165\u6846\n            inp_en = pygame.Rect(120, 25, 440, 32)\n            pygame.draw.rect(screen, [0, 0, 0], inp_en, 2)\n            #\u641c\u7d22\u6309\u94ae\n            searcht = pygame.Rect(570, 20, 140, 32)\n            draw_text(\"\u641c\u7d22\", font, BLACK, 585, 25)\n            #\u8fd4\u56de\u6309\u94ae\n            fanhui = pygame.Rect(425, 435, 140, 32)\n            draw_text(\"\u8fd4\u56de\", font, BLACK, 460, 440)\n            pygame.display.update()\n            # \u5728\u8f93\u5165\u6846\u4e2d\u663e\u793a\u8f93\u5165\u7684\u6587\u672c\n            draw_text(input_text, font, BLACK, 122, 20)\n            pygame.display.update()  # \u66f4\u65b0\u5c4f\u5e55\u663e\u793a\n        if search_t:\n            createRequest(input_text)\n            try:\n                pygame.mixer.music.load(\"..\\media.wav\")  # \u52a0\u8f7d\u97f3\u4e50  \n                pygame.mixer.music.set_volume(0.5)# \u8bbe\u7f6e\u97f3\u91cf\u5927\u5c0f0~1\u7684\u6d6e\u70b9\u6570\n                pygame.mixer.music.play() # \u64ad\u653e\u97f3\u9891\n            except:\n                createRequest(input_text)\n                pygame.mixer.music.load(\"..\\media.wav\")  # \u52a0\u8f7d\u97f3\u4e50  \n                pygame.mixer.music.set_volume(0.5)# \u8bbe\u7f6e\u97f3\u91cf\u5927\u5c0f0~1\u7684\u6d6e\u70b9\u6570\n                pygame.mixer.music.play() # \u64ad\u653e\u97f3\u9891\n            draw_text(trans, font, BLUE, 270, 60)\n            draw_text(\"\u8bb0\u4f4f\u4e86\uff1f\", font, BLUE, 230, 160)\n            jzl = pygame.Rect(195, 155, 140, 32)\n            draw_text(\"\u6ca1\u8bb0\u4f4f\uff1f\", font, BLUE, 430, 160)\n            mjz = pygame.Rect(395, 155, 140, 32)\n            pygame.display.update()\n        pygame.display.update()\n\nif __name__ == \"__main__\":\n    main()\n", "lang": "python", "published": 0, "published_at": "0000-00-00 00:00:00", "modified_at": "2024-02-19 20:44:21", "likes": 0, "views": 1, "comments": 0, "version": "offline", "source": "xes_live", "original_id": 28794692, "weight": 1, "deleted_at": "", "created_at": "2024-02-19 20:44:10", "updated_at": "2024-02-19 20:45:02", "adapter": "", "hidden_code": 2, "assets": [{"id": "4cc4f3b4-4e0c-066e-578d-6d7f55cee940", "isSelected": false, "level": 2, "isLeaf": false, "isDir": true, "name": "__pycache__", "percentage": 0, "loading": false, "fileStatus": "normal", "size": 0, "value": "", "text": "__pycache__", "title": "__pycache__", "disabled": false, "isExpanded": false, "icon": "iconfont iconfold", "type": "dir", "sort": 1, "pid": 0, "children": [{"id": "569251cf-6f68-9be7-0803-f4789b40b5d2", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "lists.cpython-3.pyc", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 6773, "value": "", "text": "lists.cpython-3.pyc", "title": "lists.cpython-3.pyc", "disabled": false, "isExpanded": false, "dataFormat": "pyc", "ext": "pyc", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "b4cfee2b48bd1f0b6a23a3db7c8ce935", "md5ext": "b4cfee2b48bd1f0b6a23a3db7c8ce935.pyc", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": "4cc4f3b4-4e0c-066e-578d-6d7f55cee940", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\__pycache__"}, {"id": "d375bb27-423a-998a-4586-6fa82ca16b13", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "Spark.cpython-3.pyc", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1258, "value": "", "text": "Spark.cpython-3.pyc", "title": "Spark.cpython-3.pyc", "disabled": false, "isExpanded": false, "dataFormat": "pyc", "ext": "pyc", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "7e718131ff8af6c234b1356c00ff84a5", "md5ext": "7e718131ff8af6c234b1356c00ff84a5.pyc", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": "4cc4f3b4-4e0c-066e-578d-6d7f55cee940", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\__pycache__"}, {"id": "c1c7f7e4-d533-c0c1-3d16-d8cc0f3b71bc", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "SparkApi.cpytho.pyc", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 5963, "value": "", "text": "SparkApi.cpytho.pyc", "title": "SparkApi.cpytho.pyc", "disabled": false, "isExpanded": false, "dataFormat": "pyc", "ext": "pyc", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "33eec560866d952d7336938ec146bd33", "md5ext": "33eec560866d952d7336938ec146bd33.pyc", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": "4cc4f3b4-4e0c-066e-578d-6d7f55cee940", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\__pycache__"}, {"id": "0eb5145f-46d7-c090-37f2-b9d8a79d29d1", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "transp.cpython-.pyc", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1985, "value": "", "text": "transp.cpython-.pyc", "title": "transp.cpython-.pyc", "disabled": false, "isExpanded": false, "dataFormat": "pyc", "ext": "pyc", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "744bacf1c82a8f08efb89b3c59f7ab9f", "md5ext": "744bacf1c82a8f08efb89b3c59f7ab9f.pyc", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": "4cc4f3b4-4e0c-066e-578d-6d7f55cee940", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\__pycache__"}]}, {"id": "2a1c143b-140e-b38e-42f1-d3d5c0b670d7", "isSelected": false, "level": 2, "isLeaf": false, "isDir": true, "name": "utils", "percentage": 0, "loading": false, "fileStatus": "normal", "size": 0, "value": "", "text": "utils", "title": "utils", "disabled": false, "isExpanded": false, "icon": "iconfont iconfold", "type": "dir", "sort": 1, "pid": 0, "children": [{"id": "51aa71a9-2b46-ef48-91ed-ad9ef5f2b98c", "isSelected": false, "level": 3, "isLeaf": false, "isDir": true, "name": "__pycache__", "percentage": 0, "loading": false, "fileStatus": "normal", "size": 0, "value": "", "text": "__pycache__", "title": "__pycache__", "disabled": false, "isExpanded": false, "icon": "iconfont iconfold", "type": "dir", "sort": 1, "pid": "2a1c143b-140e-b38e-42f1-d3d5c0b670d7", "children": [{"id": "9f23e3cc-c7ca-f354-fe34-c0802f8ae875", "isSelected": false, "level": 4, "isLeaf": true, "isDir": false, "name": "AuthV3Util.cpyt.pyc", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 2025, "value": "", "text": "AuthV3Util.cpyt.pyc", "title": "AuthV3Util.cpyt.pyc", "disabled": false, "isExpanded": false, "dataFormat": "pyc", "ext": "pyc", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "a4b12314d5d9687be0e3f68eefe27769", "md5ext": "a4b12314d5d9687be0e3f68eefe27769.pyc", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": "51aa71a9-2b46-ef48-91ed-ad9ef5f2b98c", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\utils\\__pycache__"}]}, {"id": "b5030053-6b3c-0a61-6061-9cb499c7e14b", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "AuthV3Util.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1581, "value": "import hashlib\nimport time\nimport uuid\n\n'''\n\u6dfb\u52a0\u9274\u6743\u76f8\u5173\u53c2\u6570 -\n    appKey : \u5e94\u7528ID\n    salt : \u968f\u673a\u503c\n    curtime : \u5f53\u524d\u65f6\u95f4\u6233(\u79d2)\n    signType : \u7b7e\u540d\u7248\u672c\n    sign : \u8bf7\u6c42\u7b7e\u540d\n    \n    @param appKey    \u60a8\u7684\u5e94\u7528ID\n    @param appSecret \u60a8\u7684\u5e94\u7528\u5bc6\u94a5\n    @param paramsMap \u8bf7\u6c42\u53c2\u6570\u8868\n'''\ndef addAuthParams(appKey, appSecret, params):\n    q = params.get('q')\n    if q is None:\n        q = params.get('img')\n    salt = str(uuid.uuid1())\n    curtime = str(int(time.time()))\n    sign = calculateSign(appKey, appSecret, q, salt, curtime)\n    params['appKey'] = appKey\n    params['salt'] = salt\n    params['curtime'] = curtime\n    params['signType'] = 'v3'\n    params['sign'] = sign\n\n'''\n    \u8ba1\u7b97\u9274\u6743\u7b7e\u540d -\n    \u8ba1\u7b97\u65b9\u5f0f : sign = sha256(appKey + input(q) + salt + curtime + appSecret)\n    @param appKey    \u60a8\u7684\u5e94\u7528ID\n    @param appSecret \u60a8\u7684\u5e94\u7528\u5bc6\u94a5\n    @param q         \u8bf7\u6c42\u5185\u5bb9\n    @param salt      \u968f\u673a\u503c\n    @param curtime   \u5f53\u524d\u65f6\u95f4\u6233(\u79d2)\n    @return \u9274\u6743\u7b7e\u540dsign\n'''\ndef calculateSign(appKey, appSecret, q, salt, curtime):\n    strSrc = appKey + getInput(q) + salt + curtime + appSecret\n    return encrypt(strSrc)\n\n\ndef encrypt(strSrc):\n    hash_algorithm = hashlib.sha256()\n    hash_algorithm.update(strSrc.encode('utf-8'))\n    return hash_algorithm.hexdigest()\n\n\ndef getInput(input):\n    if input is None:\n        return input\n    inputLen = len(input)\n    return input if inputLen <= 20 else input[0:10] + str(inputLen) + input[inputLen - 10:inputLen]\n", "text": "AuthV3Util.py", "title": "AuthV3Util.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "local_file", "originValue": "import hashlib\r\nimport time\r\nimport uuid\r\n\r\n'''\r\n\u6dfb\u52a0\u9274\u6743\u76f8\u5173\u53c2\u6570 -\r\n    appKey : \u5e94\u7528ID\r\n    salt : \u968f\u673a\u503c\r\n    curtime : \u5f53\u524d\u65f6\u95f4\u6233(\u79d2)\r\n    signType : \u7b7e\u540d\u7248\u672c\r\n    sign : \u8bf7\u6c42\u7b7e\u540d\r\n    \r\n    @param appKey    \u60a8\u7684\u5e94\u7528ID\r\n    @param appSecret \u60a8\u7684\u5e94\u7528\u5bc6\u94a5\r\n    @param paramsMap \u8bf7\u6c42\u53c2\u6570\u8868\r\n'''\r\ndef addAuthParams(appKey, appSecret, params):\r\n    q = params.get('q')\r\n    if q is None:\r\n        q = params.get('img')\r\n    salt = str(uuid.uuid1())\r\n    curtime = str(int(time.time()))\r\n    sign = calculateSign(appKey, appSecret, q, salt, curtime)\r\n    params['appKey'] = appKey\r\n    params['salt'] = salt\r\n    params['curtime'] = curtime\r\n    params['signType'] = 'v3'\r\n    params['sign'] = sign\r\n\r\n'''\r\n    \u8ba1\u7b97\u9274\u6743\u7b7e\u540d -\r\n    \u8ba1\u7b97\u65b9\u5f0f : sign = sha256(appKey + input(q) + salt + curtime + appSecret)\r\n    @param appKey    \u60a8\u7684\u5e94\u7528ID\r\n    @param appSecret \u60a8\u7684\u5e94\u7528\u5bc6\u94a5\r\n    @param q         \u8bf7\u6c42\u5185\u5bb9\r\n    @param salt      \u968f\u673a\u503c\r\n    @param curtime   \u5f53\u524d\u65f6\u95f4\u6233(\u79d2)\r\n    @return \u9274\u6743\u7b7e\u540dsign\r\n'''\r\ndef calculateSign(appKey, appSecret, q, salt, curtime):\r\n    strSrc = appKey + getInput(q) + salt + curtime + appSecret\r\n    return encrypt(strSrc)\r\n\r\n\r\ndef encrypt(strSrc):\r\n    hash_algorithm = hashlib.sha256()\r\n    hash_algorithm.update(strSrc.encode('utf-8'))\r\n    return hash_algorithm.hexdigest()\r\n\r\n\r\ndef getInput(input):\r\n    if input is None:\r\n        return input\r\n    inputLen = len(input)\r\n    return input if inputLen <= 20 else input[0:10] + str(inputLen) + input[inputLen - 10:inputLen]\r\n", "isChange": true, "isActived": false, "sort": 0, "isOpen": false, "assetId": "5f5259d257dabbe86e6851490e43f4ee", "md5ext": "5f5259d257dabbe86e6851490e43f4ee.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": "2a1c143b-140e-b38e-42f1-d3d5c0b670d7"}, {"id": "bdc76ab0-f5b1-b880-9e78-4b4b252654e0", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "AuthV4Util.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1254, "value": "", "text": "AuthV4Util.py", "title": "AuthV4Util.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "7ec91b0005b0e8cfbbbb171a76910622", "md5ext": "7ec91b0005b0e8cfbbbb171a76910622.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": "2a1c143b-140e-b38e-42f1-d3d5c0b670d7", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\utils"}, {"id": "5847cf20-4867-2538-0750-b01c4d55f3d5", "isSelected": false, "level": 3, "isLeaf": true, "isDir": false, "name": "WebSocketUtil.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1973, "value": "", "text": "WebSocketUtil.py", "title": "WebSocketUtil.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "8d6771fbab8fad70ab74c043f2ef7c29", "md5ext": "8d6771fbab8fad70ab74c043f2ef7c29.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": "2a1c143b-140e-b38e-42f1-d3d5c0b670d7", "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861\\utils"}]}, {"id": "e809c7b3-18cf-3afc-1927-ada3fd7b7d57", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "\u5b57\u9b42\u767d\u9e3d\u5929\u884c\u4f53.ttf", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 13618076, "value": "", "text": "\u5b57\u9b42\u767d\u9e3d\u5929\u884c\u4f53.ttf", "title": "\u5b57\u9b42\u767d\u9e3d\u5929\u884c\u4f53.ttf", "disabled": false, "isExpanded": false, "dataFormat": "ttf", "ext": "ttf", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "4b5c3520670db069e2546b19f50dfbeb", "md5ext": "4b5c3520670db069e2546b19f50dfbeb.ttf", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": 0, "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861"}, {"id": "e46548ff-eb41-d0e3-0538-7198acff1f59", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "main_requests.py", "percentage": 0, "loading": false, "fileStatus": "normal", "size": 0, "value": "import jieba\nimport requests\nimport tkinter\nimport json\nimport hashlib\nimport uuid\nimport time\nimport os\nfrom lists import *\nfrom Spark import *\ndef sha256_hash(message):\n    sha256 = hashlib.sha256()\n    sha256.update(message.encode('utf-8'))\n    hash_value = sha256.hexdigest()\n    return hash_value\ndef translate(inp):\n    if inp == \"\":\n        return \"\u8bf7\u8f93\u5165\u5b57\u7b26\uff01\"\n    else:\n        utf8_inp = inp.encode('utf-8')\n        muuid = uuid.uuid4()\n        time_curtime = int(time.time())\n        data = {\n            'q':utf8_inp,\n            'from':\"auto\",\n            'to':\"zh-CHS\",\n            'appKey':'22acb47021df3744',\n            'salt':muuid,\n            'sign':sha256_hash(\"22acb47021df3744\"+inp+str(muuid)+str(time_curtime)+\"3iEiyiP8Fj8KHmUmUkriMG8T62dxzI9I\"),   # \u7b7e\u540d\n            'signType':\"v3\",\n            'curtime':time_curtime,\n        }\n        r = requests.get(\"https://openapi.youdao.com/api\",params=data).json()\n        return \"\u7ffb\u8bd1\u4e3a\uff1a\"+r[\"translation\"][0]", "text": "main_requests.py", "title": "main_requests.py", "disabled": false, "isExpanded": true, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "local_file", "originValue": "", "isChange": true, "isActived": false, "sort": 0, "isOpen": false, "mode": "client", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": 0}, {"id": "7ea056ae-3ca0-00c5-5737-ab2209941288", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "lists.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 5674, "value": "error_list = {\n    '0':\"\u97f3\u9891\u64ad\u653e\u9519\u8bef\",\n    101:\"\u7f3a\u5c11\u5fc5\u586b\u7684\u53c2\u6570 \u9996\u5148\u786e\u4fdd\u5fc5\u586b\u53c2\u6570\u9f50\u5168\uff0c\u7136\u540e\u786e\u8ba4\u53c2\u6570\u4e66\u5199\u662f\u5426\u6b63\u786e\u3002\",\n    102:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    103:\"\u7ffb\u8bd1\u6587\u672c\u8fc7\u957f\",\n    104:\"\u4e0d\u652f\u6301\u7684API\u7c7b\u578b\",\n    105:\"\u4e0d\u652f\u6301\u7684\u7b7e\u540d\u7c7b\u578b\",\n    106:\"\u4e0d\u652f\u6301\u7684\u54cd\u5e94\u7c7b\u578b\",\n    107:\"\u4e0d\u652f\u6301\u7684\u4f20\u8f93\u52a0\u5bc6\u7c7b\u578b\",\n    108:\"\u5e94\u7528ID\u65e0\u6548\uff0c\u6ce8\u518c\u8d26\u53f7\uff0c\u767b\u5f55\u540e\u53f0\u521b\u5efa\u5e94\u7528\u5e76\u5b8c\u6210\u7ed1\u5b9a\uff0c\u53ef\u83b7\u5f97\u5e94\u7528ID\u548c\u5e94\u7528\u5bc6\u94a5\u7b49\u4fe1\u606f\",\n    109:\"batchLog\u683c\u5f0f\u4e0d\u6b63\u786e\",\n    110:\"\u65e0\u76f8\u5173\u670d\u52a1\u7684\u6709\u6548\u5e94\u7528 \u5e94\u7528\u6ca1\u6709\u7ed1\u5b9a\u670d\u52a1\u5e94\u7528\uff0c\u53ef\u4ee5\u65b0\u5efa\u670d\u52a1\u5e94\u7528\u3002\u6ce8\uff1a\u67d0\u4e9b\u670d\u52a1\u7684\u7ffb\u8bd1\u7ed3\u679c\u53d1\u97f3\u9700\u8981tts\u670d\u52a1\uff0c\u9700\u8981\u5728\u63a7\u5236\u53f0\u521b\u5efa\u8bed\u97f3\u5408\u6210\u670d\u52a1\u7ed1\u5b9a\u5e94\u7528\u540e\u65b9\u80fd\u4f7f\u7528\u3002\",\n    111:\"\u5f00\u53d1\u8005\u8d26\u53f7\u65e0\u6548\",\n    112:\"\u8bf7\u6c42\u670d\u52a1\u65e0\u6548\",\n    113:\"q\u4e0d\u80fd\u4e3a\u7a7a\",\n    114:\"\u4e0d\u652f\u6301\u7684\u56fe\u7247\u4f20\u8f93\u65b9\u5f0f\",\n    116:\"strict\u5b57\u6bb5\u53d6\u503c\u65e0\u6548\uff0c\u8bf7\u53c2\u8003\u6587\u6863\u586b\u5199\u6b63\u786e\u53c2\u6570\u503c\",\n    201:\"\u89e3\u5bc6\u5931\u8d25\uff0c\u53ef\u80fd\u4e3aDES BASE64 URLDecode\u7684\u9519\u8bef\",\n    202:\"\u7b7e\u540d\u68c0\u9a8c\u5931\u8d25 \u5982\u679c\u786e\u8ba4\u5e94\u7528ID\u548c\u5e94\u7528\u5bc6\u94a5\u7684\u6b63\u786e\u6027\uff0c\u4ecd\u8fd4\u56de202\uff0c\u4e00\u822c\u662f\u7f16\u7801\u95ee\u9898\u3002\u8bf7\u786e\u4fdd\u7ffb\u8bd1\u6587\u672c q \u4e3aUTF-8\u7f16\u7801.\",\n    203:\"\u8bbf\u95eeIP\u5730\u5740\u4e0d\u5728\u53ef\u8bbf\u95eeIP\u5217\u8868\",\n    205:\"\u8bf7\u6c42\u7684\u63a5\u53e3\u4e0e\u5e94\u7528\u7684\u5e73\u53f0\u7c7b\u578b\u4e0d\u4e00\u81f4\uff0c\u786e\u4fdd\u63a5\u5165\u65b9\u5f0f\uff08Android SDK\u3001IOS SDK\u3001API\uff09\u4e0e\u521b\u5efa\u7684\u5e94\u7528\u5e73\u53f0\u7c7b\u578b\u4e00\u81f4\u3002\u5982\u6709\u7591\u95ee\u8bf7\u53c2\u8003\u5165\u95e8\u6307\u5357\",\n    206:\"\u56e0\u4e3a\u65f6\u95f4\u6233\u65e0\u6548\u5bfc\u81f4\u7b7e\u540d\u6821\u9a8c\u5931\u8d25\",\n    207:\"\u91cd\u653e\u8bf7\u6c42\",\n    301:\"\u8f9e\u5178\u67e5\u8be2\u5931\u8d25\",\n    302:\"\u7ffb\u8bd1\u67e5\u8be2\u5931\u8d25\",\n    303:\"\u670d\u52a1\u7aef\u7684\u5176\u5b83\u5f02\u5e38\",\n    304:\"\u7ffb\u8bd1\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u6280\u672f\u540c\u5b66\",\n    308:\"rejectFallback\u53c2\u6570\u9519\u8bef\",\n    309:\"domain\u53c2\u6570\u9519\u8bef\",\n    310:\"\u672a\u5f00\u901a\u9886\u57df\u7ffb\u8bd1\u670d\u52a1\",\n    401:\"\u8d26\u6237\u5df2\u7ecf\u6b20\u8d39\uff0c\u8bf7\u8fdb\u884c\u8d26\u6237\u5145\u503c\",\n    402:\"offlinesdk\u4e0d\u53ef\u7528\",\n    411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    412:\"\u957f\u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41\uff0c\u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    1001:\"\u65e0\u6548\u7684OCR\u7c7b\u578b\",\n    1002:\"\u4e0d\u652f\u6301\u7684OCR image\u7c7b\u578b\",\n    1003:\"\u4e0d\u652f\u6301\u7684OCR Language\u7c7b\u578b\",\n    1004:\"\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    1201:\"\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    1301:\"OCR\u6bb5\u843d\u8bc6\u522b\u5931\u8d25\",\n    1411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\",\n    1412:\"\u8d85\u8fc7\u6700\u5927\u8bc6\u522b\u5b57\u8282\u6570\",\n    2003:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u8bc6\u522bLanguage\u7c7b\u578b\",\n    2004:\"\u5408\u6210\u5b57\u7b26\u8fc7\u957f\",\n    2005:\"\u4e0d\u652f\u6301\u7684\u97f3\u9891\u6587\u4ef6\u7c7b\u578b\",\n    2006:\"\u4e0d\u652f\u6301\u7684\u53d1\u97f3\u7c7b\u578b\",\n    2201:\"\u89e3\u5bc6\u5931\u8d25\",\n    2301:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    2411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    2412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u5b57\u7b26\u6570\",\n    3001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u683c\u5f0f\",\n    3002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u91c7\u6837\u7387\",\n    3003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u58f0\u9053\",\n    3004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    3005:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    3006:\"\u4e0d\u652f\u6301\u7684\u8bc6\u522b\u7c7b\u578b\",\n    3007:\"\u8bc6\u522b\u97f3\u9891\u6587\u4ef6\u8fc7\u5927\",\n    3008:\"\u8bc6\u522b\u97f3\u9891\u65f6\u957f\u8fc7\u957f\",\n    3009:\"\u4e0d\u652f\u6301\u7684\u97f3\u9891\u6587\u4ef6\u7c7b\u578b\",\n    3010:\"\u4e0d\u652f\u6301\u7684\u53d1\u97f3\u7c7b\u578b\",\n    3201:\"\u89e3\u5bc6\u5931\u8d25\",\n    3301:\"\u8bed\u97f3\u8bc6\u522b\u5931\u8d25\",\n    3302:\"\u8bed\u97f3\u7ffb\u8bd1\u5931\u8d25\",\n    3303:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    3411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    3412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u5b57\u7b26\u6570\",\n    4001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u683c\u5f0f\",\n    4002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u91c7\u6837\u7387\",\n    4003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u58f0\u9053\",\n    4004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    4005:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    4006:\"\u8bc6\u522b\u97f3\u9891\u6587\u4ef6\u8fc7\u5927\",\n    4007:\"\u8bc6\u522b\u97f3\u9891\u65f6\u957f\u8fc7\u957f\",\n    4201:\"\u89e3\u5bc6\u5931\u8d25\",\n    4301:\"\u8bed\u97f3\u8bc6\u522b\u5931\u8d25\",\n    4303:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    4411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    4412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u65f6\u957f\",\n    5001:\"\u65e0\u6548\u7684OCR\u7c7b\u578b\",\n    5002:\"\u4e0d\u652f\u6301\u7684OCR image\u7c7b\u578b\",\n    5003:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    5004:\"\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    5005:\"\u4e0d\u652f\u6301\u7684\u56fe\u7247\u7c7b\u578b\",\n    5006:\"\u6587\u4ef6\u4e3a\u7a7a\",\n    5201:\"\u89e3\u5bc6\u9519\u8bef\uff0c\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    5301:\"OCR\u6bb5\u843d\u8bc6\u522b\u5931\u8d25\",\n    5411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\",\n    5412:\"\u8d85\u8fc7\u6700\u5927\u8bc6\u522b\u6d41\u91cf\",\n    9001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u683c\u5f0f\",\n    9002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u91c7\u6837\u7387\",\n    9003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u58f0\u9053\",\n    9004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    9005:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b Language\u7c7b\u578b\",\n    9301:\"ASR\u8bc6\u522b\u5931\u8d25\",\n    9303:\"\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\",\n    9411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\uff08\u8d85\u8fc7\u6700\u5927\u8c03\u7528\u6b21\u6570\uff09\",\n    9412:\"\u8d85\u8fc7\u6700\u5927\u5904\u7406\u8bed\u97f3\u957f\u5ea6\",\n    10001:\"\u65e0\u6548\u7684OCR\u7c7b\u578b\",\n    10002:\"\u4e0d\u652f\u6301\u7684OCR image\u7c7b\u578b\",\n    10004:\"\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    10201:\"\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    10301:\"OCR\u6bb5\u843d\u8bc6\u522b\u5931\u8d25\",\n    10411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\",\n    10412:\"\u8d85\u8fc7\u6700\u5927\u8bc6\u522b\u6d41\u91cf\",\n    11001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u683c\u5f0f\",\n    11002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u91c7\u6837\u7387\",\n    11003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u58f0\u9053\",\n    11004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    11005:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    11006:\"\u8bc6\u522b\u97f3\u9891\u6587\u4ef6\u8fc7\u5927\",\n    11007:\"\u8bc6\u522b\u97f3\u9891\u65f6\u957f\u8fc7\u957f\uff0c\u6700\u5927\u652f\u630130s\",\n    11201:\"\u89e3\u5bc6\u5931\u8d25\",\n    11301:\"\u8bed\u97f3\u8bc6\u522b\u5931\u8d25\",\n    11303:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    11411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    11412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u65f6\u957f\",\n    12001:\"\u56fe\u7247\u5c3a\u5bf8\u8fc7\u5927\",\n    12002:\"\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    12003:\"\u5f15\u64ce\u670d\u52a1\u5668\u8fd4\u56de\u9519\u8bef\",\n    12004:\"\u56fe\u7247\u4e3a\u7a7a\",\n    12005:\"\u4e0d\u652f\u6301\u7684\u8bc6\u522b\u56fe\u7247\u7c7b\u578b\",\n    12006:\"\u56fe\u7247\u65e0\u5339\u914d\u7ed3\u679c\",\n    13001:\"\u4e0d\u652f\u6301\u7684\u89d2\u5ea6\u7c7b\u578b\",\n    13002:\"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b\",\n    13003:\"\u8868\u683c\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    13004:\"\u6587\u4ef6\u4e3a\u7a7a\",\n    13301:\"\u8868\u683c\u8bc6\u522b\u5931\u8d25\",\n    15001:\"\u9700\u8981\u56fe\u7247\",\n    15002:\"\u56fe\u7247\u8fc7\u5927\uff081M\uff09\",\n    15003:\"\u670d\u52a1\u8c03\u7528\u5931\u8d25\",\n    17001:\"\u9700\u8981\u56fe\u7247\",\n    17002:\"\u56fe\u7247\u8fc7\u5927\uff081M\uff09\",\n    17003:\"\u8bc6\u522b\u7c7b\u578b\u672a\u627e\u5230\",\n    17004:\"\u4e0d\u652f\u6301\u7684\u8bc6\u522b\u7c7b\u578b\",\n    17005:\"\u670d\u52a1\u8c03\u7528\u5931\u8d25\",\n}", "text": "lists.py", "title": "lists.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "local_file", "originValue": "error_list = {\n    '0':\"\u97f3\u9891\u64ad\u653e\u9519\u8bef\",\n    101:\"\u7f3a\u5c11\u5fc5\u586b\u7684\u53c2\u6570 \u9996\u5148\u786e\u4fdd\u5fc5\u586b\u53c2\u6570\u9f50\u5168\uff0c\u7136\u540e\u786e\u8ba4\u53c2\u6570\u4e66\u5199\u662f\u5426\u6b63\u786e\u3002\",\n    102:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    103:\"\u7ffb\u8bd1\u6587\u672c\u8fc7\u957f\",\n    104:\"\u4e0d\u652f\u6301\u7684API\u7c7b\u578b\",\n    105:\"\u4e0d\u652f\u6301\u7684\u7b7e\u540d\u7c7b\u578b\",\n    106:\"\u4e0d\u652f\u6301\u7684\u54cd\u5e94\u7c7b\u578b\",\n    107:\"\u4e0d\u652f\u6301\u7684\u4f20\u8f93\u52a0\u5bc6\u7c7b\u578b\",\n    108:\"\u5e94\u7528ID\u65e0\u6548\uff0c\u6ce8\u518c\u8d26\u53f7\uff0c\u767b\u5f55\u540e\u53f0\u521b\u5efa\u5e94\u7528\u5e76\u5b8c\u6210\u7ed1\u5b9a\uff0c\u53ef\u83b7\u5f97\u5e94\u7528ID\u548c\u5e94\u7528\u5bc6\u94a5\u7b49\u4fe1\u606f\",\n    109:\"batchLog\u683c\u5f0f\u4e0d\u6b63\u786e\",\n    110:\"\u65e0\u76f8\u5173\u670d\u52a1\u7684\u6709\u6548\u5e94\u7528 \u5e94\u7528\u6ca1\u6709\u7ed1\u5b9a\u670d\u52a1\u5e94\u7528\uff0c\u53ef\u4ee5\u65b0\u5efa\u670d\u52a1\u5e94\u7528\u3002\u6ce8\uff1a\u67d0\u4e9b\u670d\u52a1\u7684\u7ffb\u8bd1\u7ed3\u679c\u53d1\u97f3\u9700\u8981tts\u670d\u52a1\uff0c\u9700\u8981\u5728\u63a7\u5236\u53f0\u521b\u5efa\u8bed\u97f3\u5408\u6210\u670d\u52a1\u7ed1\u5b9a\u5e94\u7528\u540e\u65b9\u80fd\u4f7f\u7528\u3002\",\n    111:\"\u5f00\u53d1\u8005\u8d26\u53f7\u65e0\u6548\",\n    112:\"\u8bf7\u6c42\u670d\u52a1\u65e0\u6548\",\n    113:\"q\u4e0d\u80fd\u4e3a\u7a7a\",\n    114:\"\u4e0d\u652f\u6301\u7684\u56fe\u7247\u4f20\u8f93\u65b9\u5f0f\",\n    116:\"strict\u5b57\u6bb5\u53d6\u503c\u65e0\u6548\uff0c\u8bf7\u53c2\u8003\u6587\u6863\u586b\u5199\u6b63\u786e\u53c2\u6570\u503c\",\n    201:\"\u89e3\u5bc6\u5931\u8d25\uff0c\u53ef\u80fd\u4e3aDES BASE64 URLDecode\u7684\u9519\u8bef\",\n    202:\"\u7b7e\u540d\u68c0\u9a8c\u5931\u8d25 \u5982\u679c\u786e\u8ba4\u5e94\u7528ID\u548c\u5e94\u7528\u5bc6\u94a5\u7684\u6b63\u786e\u6027\uff0c\u4ecd\u8fd4\u56de202\uff0c\u4e00\u822c\u662f\u7f16\u7801\u95ee\u9898\u3002\u8bf7\u786e\u4fdd\u7ffb\u8bd1\u6587\u672c q \u4e3aUTF-8\u7f16\u7801.\",\n    203:\"\u8bbf\u95eeIP\u5730\u5740\u4e0d\u5728\u53ef\u8bbf\u95eeIP\u5217\u8868\",\n    205:\"\u8bf7\u6c42\u7684\u63a5\u53e3\u4e0e\u5e94\u7528\u7684\u5e73\u53f0\u7c7b\u578b\u4e0d\u4e00\u81f4\uff0c\u786e\u4fdd\u63a5\u5165\u65b9\u5f0f\uff08Android SDK\u3001IOS SDK\u3001API\uff09\u4e0e\u521b\u5efa\u7684\u5e94\u7528\u5e73\u53f0\u7c7b\u578b\u4e00\u81f4\u3002\u5982\u6709\u7591\u95ee\u8bf7\u53c2\u8003\u5165\u95e8\u6307\u5357\",\n    206:\"\u56e0\u4e3a\u65f6\u95f4\u6233\u65e0\u6548\u5bfc\u81f4\u7b7e\u540d\u6821\u9a8c\u5931\u8d25\",\n    207:\"\u91cd\u653e\u8bf7\u6c42\",\n    301:\"\u8f9e\u5178\u67e5\u8be2\u5931\u8d25\",\n    302:\"\u7ffb\u8bd1\u67e5\u8be2\u5931\u8d25\",\n    303:\"\u670d\u52a1\u7aef\u7684\u5176\u5b83\u5f02\u5e38\",\n    304:\"\u7ffb\u8bd1\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u6280\u672f\u540c\u5b66\",\n    308:\"rejectFallback\u53c2\u6570\u9519\u8bef\",\n    309:\"domain\u53c2\u6570\u9519\u8bef\",\n    310:\"\u672a\u5f00\u901a\u9886\u57df\u7ffb\u8bd1\u670d\u52a1\",\n    401:\"\u8d26\u6237\u5df2\u7ecf\u6b20\u8d39\uff0c\u8bf7\u8fdb\u884c\u8d26\u6237\u5145\u503c\",\n    402:\"offlinesdk\u4e0d\u53ef\u7528\",\n    411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    412:\"\u957f\u8bf7\u6c42\u8fc7\u4e8e\u9891\u7e41\uff0c\u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    1001:\"\u65e0\u6548\u7684OCR\u7c7b\u578b\",\n    1002:\"\u4e0d\u652f\u6301\u7684OCR image\u7c7b\u578b\",\n    1003:\"\u4e0d\u652f\u6301\u7684OCR Language\u7c7b\u578b\",\n    1004:\"\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    1201:\"\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    1301:\"OCR\u6bb5\u843d\u8bc6\u522b\u5931\u8d25\",\n    1411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\",\n    1412:\"\u8d85\u8fc7\u6700\u5927\u8bc6\u522b\u5b57\u8282\u6570\",\n    2003:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u8bc6\u522bLanguage\u7c7b\u578b\",\n    2004:\"\u5408\u6210\u5b57\u7b26\u8fc7\u957f\",\n    2005:\"\u4e0d\u652f\u6301\u7684\u97f3\u9891\u6587\u4ef6\u7c7b\u578b\",\n    2006:\"\u4e0d\u652f\u6301\u7684\u53d1\u97f3\u7c7b\u578b\",\n    2201:\"\u89e3\u5bc6\u5931\u8d25\",\n    2301:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    2411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    2412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u5b57\u7b26\u6570\",\n    3001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u683c\u5f0f\",\n    3002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u91c7\u6837\u7387\",\n    3003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u58f0\u9053\",\n    3004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    3005:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    3006:\"\u4e0d\u652f\u6301\u7684\u8bc6\u522b\u7c7b\u578b\",\n    3007:\"\u8bc6\u522b\u97f3\u9891\u6587\u4ef6\u8fc7\u5927\",\n    3008:\"\u8bc6\u522b\u97f3\u9891\u65f6\u957f\u8fc7\u957f\",\n    3009:\"\u4e0d\u652f\u6301\u7684\u97f3\u9891\u6587\u4ef6\u7c7b\u578b\",\n    3010:\"\u4e0d\u652f\u6301\u7684\u53d1\u97f3\u7c7b\u578b\",\n    3201:\"\u89e3\u5bc6\u5931\u8d25\",\n    3301:\"\u8bed\u97f3\u8bc6\u522b\u5931\u8d25\",\n    3302:\"\u8bed\u97f3\u7ffb\u8bd1\u5931\u8d25\",\n    3303:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    3411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    3412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u5b57\u7b26\u6570\",\n    4001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u683c\u5f0f\",\n    4002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u91c7\u6837\u7387\",\n    4003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u58f0\u9053\",\n    4004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    4005:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    4006:\"\u8bc6\u522b\u97f3\u9891\u6587\u4ef6\u8fc7\u5927\",\n    4007:\"\u8bc6\u522b\u97f3\u9891\u65f6\u957f\u8fc7\u957f\",\n    4201:\"\u89e3\u5bc6\u5931\u8d25\",\n    4301:\"\u8bed\u97f3\u8bc6\u522b\u5931\u8d25\",\n    4303:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    4411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    4412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u65f6\u957f\",\n    5001:\"\u65e0\u6548\u7684OCR\u7c7b\u578b\",\n    5002:\"\u4e0d\u652f\u6301\u7684OCR image\u7c7b\u578b\",\n    5003:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    5004:\"\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    5005:\"\u4e0d\u652f\u6301\u7684\u56fe\u7247\u7c7b\u578b\",\n    5006:\"\u6587\u4ef6\u4e3a\u7a7a\",\n    5201:\"\u89e3\u5bc6\u9519\u8bef\uff0c\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    5301:\"OCR\u6bb5\u843d\u8bc6\u522b\u5931\u8d25\",\n    5411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\",\n    5412:\"\u8d85\u8fc7\u6700\u5927\u8bc6\u522b\u6d41\u91cf\",\n    9001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u683c\u5f0f\",\n    9002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u91c7\u6837\u7387\",\n    9003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u58f0\u9053\",\n    9004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    9005:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b Language\u7c7b\u578b\",\n    9301:\"ASR\u8bc6\u522b\u5931\u8d25\",\n    9303:\"\u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\",\n    9411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\uff08\u8d85\u8fc7\u6700\u5927\u8c03\u7528\u6b21\u6570\uff09\",\n    9412:\"\u8d85\u8fc7\u6700\u5927\u5904\u7406\u8bed\u97f3\u957f\u5ea6\",\n    10001:\"\u65e0\u6548\u7684OCR\u7c7b\u578b\",\n    10002:\"\u4e0d\u652f\u6301\u7684OCR image\u7c7b\u578b\",\n    10004:\"\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    10201:\"\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    10301:\"OCR\u6bb5\u843d\u8bc6\u522b\u5931\u8d25\",\n    10411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650\",\n    10412:\"\u8d85\u8fc7\u6700\u5927\u8bc6\u522b\u6d41\u91cf\",\n    11001:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u683c\u5f0f\",\n    11002:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u91c7\u6837\u7387\",\n    11003:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u8bc6\u522b\u58f0\u9053\",\n    11004:\"\u4e0d\u652f\u6301\u7684\u8bed\u97f3\u4e0a\u4f20\u7c7b\u578b\",\n    11005:\"\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7c7b\u578b\",\n    11006:\"\u8bc6\u522b\u97f3\u9891\u6587\u4ef6\u8fc7\u5927\",\n    11007:\"\u8bc6\u522b\u97f3\u9891\u65f6\u957f\u8fc7\u957f\uff0c\u6700\u5927\u652f\u630130s\",\n    11201:\"\u89e3\u5bc6\u5931\u8d25\",\n    11301:\"\u8bed\u97f3\u8bc6\u522b\u5931\u8d25\",\n    11303:\"\u670d\u52a1\u7684\u5f02\u5e38\",\n    11411:\"\u8bbf\u95ee\u9891\u7387\u53d7\u9650 \u8bf7\u7a0d\u540e\u8bbf\u95ee\",\n    11412:\"\u8d85\u8fc7\u6700\u5927\u8bf7\u6c42\u65f6\u957f\",\n    12001:\"\u56fe\u7247\u5c3a\u5bf8\u8fc7\u5927\",\n    12002:\"\u56fe\u7247base64\u89e3\u5bc6\u5931\u8d25\",\n    12003:\"\u5f15\u64ce\u670d\u52a1\u5668\u8fd4\u56de\u9519\u8bef\",\n    12004:\"\u56fe\u7247\u4e3a\u7a7a\",\n    12005:\"\u4e0d\u652f\u6301\u7684\u8bc6\u522b\u56fe\u7247\u7c7b\u578b\",\n    12006:\"\u56fe\u7247\u65e0\u5339\u914d\u7ed3\u679c\",\n    13001:\"\u4e0d\u652f\u6301\u7684\u89d2\u5ea6\u7c7b\u578b\",\n    13002:\"\u4e0d\u652f\u6301\u7684\u6587\u4ef6\u7c7b\u578b\",\n    13003:\"\u8868\u683c\u8bc6\u522b\u56fe\u7247\u8fc7\u5927\",\n    13004:\"\u6587\u4ef6\u4e3a\u7a7a\",\n    13301:\"\u8868\u683c\u8bc6\u522b\u5931\u8d25\",\n    15001:\"\u9700\u8981\u56fe\u7247\",\n    15002:\"\u56fe\u7247\u8fc7\u5927\uff081M\uff09\",\n    15003:\"\u670d\u52a1\u8c03\u7528\u5931\u8d25\",\n    17001:\"\u9700\u8981\u56fe\u7247\",\n    17002:\"\u56fe\u7247\u8fc7\u5927\uff081M\uff09\",\n    17003:\"\u8bc6\u522b\u7c7b\u578b\u672a\u627e\u5230\",\n    17004:\"\u4e0d\u652f\u6301\u7684\u8bc6\u522b\u7c7b\u578b\",\n    17005:\"\u670d\u52a1\u8c03\u7528\u5931\u8d25\",\n}", "isChange": true, "isActived": false, "sort": 0, "isOpen": false, "assetId": "cf7be5ce1fbccc585cae83101a800110", "md5ext": "cf7be5ce1fbccc585cae83101a800110.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": 0}, {"id": "1b9cf0a1-0f09-a92f-eebe-e9819158d083", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "Spark.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1030, "value": "from SparkApi import *\nappid = \"8a41eee4\"\napi_secret = \"NWUwYTY3ZmU5ZWI0ZTU3Mjk2YTI4MWE3\"\napi_key =\"ce27261e0616d4fb2fd70714d50b1ff8\"\n\ndomain = \"generalv3\"\n#\u4e91\u7aef\u73af\u5883\u7684\u670d\u52a1\u5730\u5740\nSpark_url = \"wss://spark-api.xf-yun.com/v3.1/chat\"\n\n\ntext =[]\n\ndef getText(role,content):\n    jsoncon = {}\n    jsoncon[\"role\"] = role\n    jsoncon[\"content\"] = content\n    text.append(jsoncon)\n    return text\n\ndef getlength(text):\n    length = 0\n    for content in text:\n        temp = content[\"content\"]\n        leng = len(temp)\n        length += leng\n    return length\n\ndef checklen(text):\n    while (getlength(text) > 8000):\n        del text[0]\n    return text\n    \n\n\n# if __name__ == '__main__':\n#     text.clear\n#     while(1):\n#         Input = input(\"\\n\" +\"\u6211:\")\n#         question = checklen(getText(\"user\",Input))\n#         SparkApi.answer =\"\"\n#         print(\"\u661f\u706b:\",end = \"\")\n#         SparkApi.main(appid,api_key,api_secret,Spark_url,domain,question)\n#         getText(\"assistant\",SparkApi.answer)\n#         print(str(text))\n\n", "text": "Spark.py", "title": "Spark.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "local_file", "originValue": "from uses.SparkApi import *\nappid = \"8a41eee4\"\napi_secret = \"NWUwYTY3ZmU5ZWI0ZTU3Mjk2YTI4MWE3\"\napi_key =\"ce27261e0616d4fb2fd70714d50b1ff8\"\n\ndomain = \"generalv3\"\n#\u4e91\u7aef\u73af\u5883\u7684\u670d\u52a1\u5730\u5740\nSpark_url = \"wss://spark-api.xf-yun.com/v3.1/chat\"\n\n\ntext =[]\n\ndef getText(role,content):\n    jsoncon = {}\n    jsoncon[\"role\"] = role\n    jsoncon[\"content\"] = content\n    text.append(jsoncon)\n    return text\n\ndef getlength(text):\n    length = 0\n    for content in text:\n        temp = content[\"content\"]\n        leng = len(temp)\n        length += leng\n    return length\n\ndef checklen(text):\n    while (getlength(text) > 8000):\n        del text[0]\n    return text\n    \n\n\n# if __name__ == '__main__':\n#     text.clear\n#     while(1):\n#         Input = input(\"\\n\" +\"\u6211:\")\n#         question = checklen(getText(\"user\",Input))\n#         SparkApi.answer =\"\"\n#         print(\"\u661f\u706b:\",end = \"\")\n#         SparkApi.main(appid,api_key,api_secret,Spark_url,domain,question)\n#         getText(\"assistant\",SparkApi.answer)\n#         print(str(text))\n\n", "isChange": true, "isActived": false, "sort": 0, "isOpen": false, "assetId": "62d35a7bd3e372dd5e55b5c01c989e62", "md5ext": "62d35a7bd3e372dd5e55b5c01c989e62.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": 0}, {"id": "e33adf9f-8f73-2b2f-ed7d-11b7470dc786", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "SparkApi.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 3920, "value": "import _thread as thread\nimport base64\nimport datetime\nimport hashlib\nimport hmac\nimport json\nfrom urllib.parse import urlparse\nimport ssl\nfrom datetime import datetime\nfrom time import mktime\nfrom urllib.parse import urlencode\nfrom wsgiref.handlers import format_date_time\n\nimport websocket  # \u4f7f\u7528websocket_client\nanswer = \"\"\n\nclass Ws_Param(object):\n    # \u521d\u59cb\u5316\n    def __init__(self, APPID, APIKey, APISecret, Spark_url):\n        self.APPID = APPID\n        self.APIKey = APIKey\n        self.APISecret = APISecret\n        self.host = urlparse(Spark_url).netloc\n        self.path = urlparse(Spark_url).path\n        self.Spark_url = Spark_url\n\n    # \u751f\u6210url\n    def create_url(self):\n        # \u751f\u6210RFC1123\u683c\u5f0f\u7684\u65f6\u95f4\u6233\n        now = datetime.now()\n        date = format_date_time(mktime(now.timetuple()))\n\n        # \u62fc\u63a5\u5b57\u7b26\u4e32\n        signature_origin = \"host: \" + self.host + \"\\n\"\n        signature_origin += \"date: \" + date + \"\\n\"\n        signature_origin += \"GET \" + self.path + \" HTTP/1.1\"\n\n        # \u8fdb\u884chmac-sha256\u8fdb\u884c\u52a0\u5bc6\n        signature_sha = hmac.new(self.APISecret.encode('utf-8'), signature_origin.encode('utf-8'),\n                                 digestmod=hashlib.sha256).digest()\n\n        signature_sha_base64 = base64.b64encode(signature_sha).decode(encoding='utf-8')\n\n        authorization_origin = f'api_key=\"{self.APIKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"{signature_sha_base64}\"'\n\n        authorization = base64.b64encode(authorization_origin.encode('utf-8')).decode(encoding='utf-8')\n\n        # \u5c06\u8bf7\u6c42\u7684\u9274\u6743\u53c2\u6570\u7ec4\u5408\u4e3a\u5b57\u5178\n        v = {\n            \"authorization\": authorization,\n            \"date\": date,\n            \"host\": self.host\n        }\n        # \u62fc\u63a5\u9274\u6743\u53c2\u6570\uff0c\u751f\u6210url\n        url = self.Spark_url + '?' + urlencode(v)\n        # \u6b64\u5904\u6253\u5370\u51fa\u5efa\u7acb\u8fde\u63a5\u65f6\u5019\u7684url,\u53c2\u8003\u672cdemo\u7684\u65f6\u5019\u53ef\u53d6\u6d88\u4e0a\u65b9\u6253\u5370\u7684\u6ce8\u91ca\uff0c\u6bd4\u5bf9\u76f8\u540c\u53c2\u6570\u65f6\u751f\u6210\u7684url\u4e0e\u81ea\u5df1\u4ee3\u7801\u751f\u6210\u7684url\u662f\u5426\u4e00\u81f4\n        return url\n\n\n# \u6536\u5230websocket\u9519\u8bef\u7684\u5904\u7406\ndef on_error(ws, error):\n    print(\"### error:\", error)\n\n\n# \u6536\u5230websocket\u5173\u95ed\u7684\u5904\u7406\ndef on_close(ws,one,two):\n    print(\" \")\n\n\n# \u6536\u5230websocket\u8fde\u63a5\u5efa\u7acb\u7684\u5904\u7406\ndef on_open(ws):\n    thread.start_new_thread(run, (ws,))\n\n\ndef run(ws, *args):\n    data = json.dumps(gen_params(appid=ws.appid, domain= ws.domain,question=ws.question))\n    ws.send(data)\n\n\n# \u6536\u5230websocket\u6d88\u606f\u7684\u5904\u7406\ndef on_message(ws, message):\n    # print(message)\n    data = json.loads(message)\n    code = data['header']['code']\n    if code != 0:\n        print(f'\u8bf7\u6c42\u9519\u8bef: {code}, {data}')\n        ws.close()\n    else:\n        choices = data[\"payload\"][\"choices\"]\n        status = choices[\"status\"]\n        content = choices[\"text\"][0][\"content\"]\n        print(content,end =\"\")\n        global answer\n        answer += content\n        # print(1)\n        if status == 2:\n            ws.close()\n\n\ndef gen_params(appid, domain,question):\n    \"\"\"\n    \u901a\u8fc7appid\u548c\u7528\u6237\u7684\u63d0\u95ee\u6765\u751f\u6210\u8bf7\u53c2\u6570\n    \"\"\"\n    data = {\n        \"header\": {\n            \"app_id\": appid,\n            \"uid\": \"1234\"\n        },\n        \"parameter\": {\n            \"chat\": {\n                \"domain\": domain,\n                \"temperature\": 0.5,\n                \"max_tokens\": 2048\n            }\n        },\n        \"payload\": {\n            \"message\": {\n                \"text\": question\n            }\n        }\n    }\n    return data\n\n\ndef main(appid, api_key, api_secret, Spark_url,domain, question):\n    # print(\"\u661f\u706b:\")\n    wsParam = Ws_Param(appid, api_key, api_secret, Spark_url)\n    websocket.enableTrace(False)\n    wsUrl = wsParam.create_url()\n    ws = websocket.WebSocketApp(wsUrl, on_message=on_message, on_error=on_error, on_close=on_close, on_open=on_open)\n    ws.appid = appid\n    ws.question = question\n    ws.domain = domain\n    ws.run_forever(sslopt={\"cert_reqs\": ssl.CERT_NONE})\n\n\n", "text": "SparkApi.py", "title": "SparkApi.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "local_file", "originValue": "import _thread as thread\nimport base64\nimport datetime\nimport hashlib\nimport hmac\nimport json\nfrom urllib.parse import urlparse\nimport ssl\nfrom datetime import datetime\nfrom time import mktime\nfrom urllib.parse import urlencode\nfrom wsgiref.handlers import format_date_time\n\nimport websocket  # \u4f7f\u7528websocket_client\nanswer = \"\"\n\nclass Ws_Param(object):\n    # \u521d\u59cb\u5316\n    def __init__(self, APPID, APIKey, APISecret, Spark_url):\n        self.APPID = APPID\n        self.APIKey = APIKey\n        self.APISecret = APISecret\n        self.host = urlparse(Spark_url).netloc\n        self.path = urlparse(Spark_url).path\n        self.Spark_url = Spark_url\n\n    # \u751f\u6210url\n    def create_url(self):\n        # \u751f\u6210RFC1123\u683c\u5f0f\u7684\u65f6\u95f4\u6233\n        now = datetime.now()\n        date = format_date_time(mktime(now.timetuple()))\n\n        # \u62fc\u63a5\u5b57\u7b26\u4e32\n        signature_origin = \"host: \" + self.host + \"\\n\"\n        signature_origin += \"date: \" + date + \"\\n\"\n        signature_origin += \"GET \" + self.path + \" HTTP/1.1\"\n\n        # \u8fdb\u884chmac-sha256\u8fdb\u884c\u52a0\u5bc6\n        signature_sha = hmac.new(self.APISecret.encode('utf-8'), signature_origin.encode('utf-8'),\n                                 digestmod=hashlib.sha256).digest()\n\n        signature_sha_base64 = base64.b64encode(signature_sha).decode(encoding='utf-8')\n\n        authorization_origin = f'api_key=\"{self.APIKey}\", algorithm=\"hmac-sha256\", headers=\"host date request-line\", signature=\"{signature_sha_base64}\"'\n\n        authorization = base64.b64encode(authorization_origin.encode('utf-8')).decode(encoding='utf-8')\n\n        # \u5c06\u8bf7\u6c42\u7684\u9274\u6743\u53c2\u6570\u7ec4\u5408\u4e3a\u5b57\u5178\n        v = {\n            \"authorization\": authorization,\n            \"date\": date,\n            \"host\": self.host\n        }\n        # \u62fc\u63a5\u9274\u6743\u53c2\u6570\uff0c\u751f\u6210url\n        url = self.Spark_url + '?' + urlencode(v)\n        # \u6b64\u5904\u6253\u5370\u51fa\u5efa\u7acb\u8fde\u63a5\u65f6\u5019\u7684url,\u53c2\u8003\u672cdemo\u7684\u65f6\u5019\u53ef\u53d6\u6d88\u4e0a\u65b9\u6253\u5370\u7684\u6ce8\u91ca\uff0c\u6bd4\u5bf9\u76f8\u540c\u53c2\u6570\u65f6\u751f\u6210\u7684url\u4e0e\u81ea\u5df1\u4ee3\u7801\u751f\u6210\u7684url\u662f\u5426\u4e00\u81f4\n        return url\n\n\n# \u6536\u5230websocket\u9519\u8bef\u7684\u5904\u7406\ndef on_error(ws, error):\n    print(\"### error:\", error)\n\n\n# \u6536\u5230websocket\u5173\u95ed\u7684\u5904\u7406\ndef on_close(ws,one,two):\n    print(\" \")\n\n\n# \u6536\u5230websocket\u8fde\u63a5\u5efa\u7acb\u7684\u5904\u7406\ndef on_open(ws):\n    thread.start_new_thread(run, (ws,))\n\n\ndef run(ws, *args):\n    data = json.dumps(gen_params(appid=ws.appid, domain= ws.domain,question=ws.question))\n    ws.send(data)\n\n\n# \u6536\u5230websocket\u6d88\u606f\u7684\u5904\u7406\ndef on_message(ws, message):\n    # print(message)\n    data = json.loads(message)\n    code = data['header']['code']\n    if code != 0:\n        print(f'\u8bf7\u6c42\u9519\u8bef: {code}, {data}')\n        ws.close()\n    else:\n        choices = data[\"payload\"][\"choices\"]\n        status = choices[\"status\"]\n        content = choices[\"text\"][0][\"content\"]\n        print(content,end =\"\")\n        global answer\n        answer += content\n        # print(1)\n        if status == 2:\n            ws.close()\n\n\ndef gen_params(appid, domain,question):\n    \"\"\"\n    \u901a\u8fc7appid\u548c\u7528\u6237\u7684\u63d0\u95ee\u6765\u751f\u6210\u8bf7\u53c2\u6570\n    \"\"\"\n    data = {\n        \"header\": {\n            \"app_id\": appid,\n            \"uid\": \"1234\"\n        },\n        \"parameter\": {\n            \"chat\": {\n                \"domain\": domain,\n                \"temperature\": 0.5,\n                \"max_tokens\": 2048\n            }\n        },\n        \"payload\": {\n            \"message\": {\n                \"text\": question\n            }\n        }\n    }\n    return data\n\n\ndef main(appid, api_key, api_secret, Spark_url,domain, question):\n    # print(\"\u661f\u706b:\")\n    wsParam = Ws_Param(appid, api_key, api_secret, Spark_url)\n    websocket.enableTrace(False)\n    wsUrl = wsParam.create_url()\n    ws = websocket.WebSocketApp(wsUrl, on_message=on_message, on_error=on_error, on_close=on_close, on_open=on_open)\n    ws.appid = appid\n    ws.question = question\n    ws.domain = domain\n    ws.run_forever(sslopt={\"cert_reqs\": ssl.CERT_NONE})\n\n\n", "isChange": true, "isActived": false, "sort": 0, "isOpen": false, "assetId": "c692e75ae8a824254fb3162b12a4aa62", "md5ext": "c692e75ae8a824254fb3162b12a4aa62.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": 0}, {"id": "392fae63-c125-4c8d-afd9-899e4896ea2c", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "transp.py", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 1208, "value": "import requests\n\nfrom utils.AuthV3Util import addAuthParams\n\n# \u60a8\u7684\u5e94\u7528ID\nAPP_KEY = '068152c763ca296d'\n# \u60a8\u7684\u5e94\u7528\u5bc6\u94a5\nAPP_SECRET = 'He98ZYN0sXW8dYz4Ry52exZQICWYlHwS'\n\n# \u5408\u6210\u97f3\u9891\u4fdd\u5b58\u8def\u5f84, \u4f8bwindows\u8def\u5f84\uff1aPATH = \"C:\\\\tts\\\\media.mp3\"\nPATH = '..\\\\media.wav'\n\n\ndef createRequest(que):\n    '''\n    note: \u5c06\u4e0b\u5217\u53d8\u91cf\u66ff\u6362\u4e3a\u9700\u8981\u8bf7\u6c42\u7684\u53c2\u6570\n    '''\n    q = que\n    voiceName = 'youxiaoying'\n    format = 'mp3'\n\n    data = {'q': q, 'voiceName': voiceName, 'format': format}\n\n    addAuthParams(APP_KEY, APP_SECRET, data)\n\n    header = {'Content-Type': 'application/x-www-form-urlencoded'}\n    res = doCall('https://openapi.youdao.com/ttsapi', header, data, 'post')\n    saveFile(res)\n\n\ndef doCall(url, header, params, method):\n    if 'get' == method:\n        return requests.get(url, params)\n    elif 'post' == method:\n        return requests.post(url, params, header)\n\n\ndef saveFile(res):\n    contentType = res.headers['Content-Type']\n    if 'audio' in contentType:\n        fo = open(PATH, 'wb')\n        fo.write(res.content)\n        fo.close()\n        print('save file path: ' + PATH)\n    else:\n        print(str(res.content, 'utf-8'))", "text": "transp.py", "title": "transp.py", "disabled": false, "isExpanded": false, "dataFormat": "py", "ext": "py", "icon": "iconfont iconpython", "svgId": "#iconpython", "type": "local_file", "originValue": "import requests\r\n\r\nfrom uses.utils.AuthV3Util import addAuthParams\r\n\r\n# \u60a8\u7684\u5e94\u7528ID\r\nAPP_KEY = '068152c763ca296d'\r\n# \u60a8\u7684\u5e94\u7528\u5bc6\u94a5\r\nAPP_SECRET = 'He98ZYN0sXW8dYz4Ry52exZQICWYlHwS'\r\n\r\n# \u5408\u6210\u97f3\u9891\u4fdd\u5b58\u8def\u5f84, \u4f8bwindows\u8def\u5f84\uff1aPATH = \"C:\\\\tts\\\\media.mp3\"\r\nPATH = '..\\\\media.mp3'\r\n\r\n\r\ndef createRequest(que):\r\n    '''\r\n    note: \u5c06\u4e0b\u5217\u53d8\u91cf\u66ff\u6362\u4e3a\u9700\u8981\u8bf7\u6c42\u7684\u53c2\u6570\r\n    '''\r\n    q = que\r\n    voiceName = 'youxiaoying'\r\n    format = 'mp3'\r\n\r\n    data = {'q': q, 'voiceName': voiceName, 'format': format}\r\n\r\n    addAuthParams(APP_KEY, APP_SECRET, data)\r\n\r\n    header = {'Content-Type': 'application/x-www-form-urlencoded'}\r\n    res = doCall('https://openapi.youdao.com/ttsapi', header, data, 'post')\r\n    saveFile(res)\r\n\r\n\r\ndef doCall(url, header, params, method):\r\n    if 'get' == method:\r\n        return requests.get(url, params)\r\n    elif 'post' == method:\r\n        return requests.post(url, params, header)\r\n\r\n\r\ndef saveFile(res):\r\n    contentType = res.headers['Content-Type']\r\n    if 'audio' in contentType:\r\n        fo = open(PATH, 'wb')\r\n        fo.write(res.content)\r\n        fo.close()\r\n        print('save file path: ' + PATH)\r\n    else:\r\n        print(str(res.content, 'utf-8'))", "isChange": true, "isActived": false, "sort": 0, "isOpen": false, "assetId": "df82319b8ca6386eb788f158a93946b8", "md5ext": "df82319b8ca6386eb788f158a93946b8.py", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "preview": true, "editable": true, "lang": "python", "color": "#FFA629", "pid": 0}, {"id": "362f482f-596e-3de7-8f03-eba48b7c6b60", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "nojizhu.pc3", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 0, "value": "", "text": "nojizhu.pc3", "title": "nojizhu.pc3", "disabled": false, "isExpanded": false, "dataFormat": "pc3", "ext": "pc3", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "d41d8cd98f00b204e9800998ecf8427e", "md5ext": "d41d8cd98f00b204e9800998ecf8427e.pc3", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": 0, "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861"}, {"id": "069709c2-a3b7-2943-d381-33bfa7ffe193", "isSelected": false, "level": 2, "isLeaf": true, "isDir": false, "name": "jizhu.pc3", "percentage": 100, "loading": false, "fileStatus": "normal", "size": 115, "value": "", "text": "jizhu.pc3", "title": "jizhu.pc3", "disabled": false, "isExpanded": false, "dataFormat": "pc3", "ext": "pc3", "icon": "iconfont iconother", "svgId": "#iconother", "type": "oss_file", "originValue": "", "isChange": false, "isActived": false, "sort": 0, "isOpen": false, "assetId": "475110d10984e94467165511e73c8699", "md5ext": "475110d10984e94467165511e73c8699.pc3", "preClick": false, "mode": "client", "state": "uploadOk", "operation": "uploadOk", "pid": 0, "path": "C:\\Users\\dell\\\u5b66\u800c\u601d\u76f4\u64ad\\code\\cache\\asset\\51522861"}], "removed": 0, "video": "", "audio": "", "unlikes": 0, "code_complete": 1, "source_code_views": 0, "favorites": 0, "tags": "", "xml_path": "c26b1459c3a3ce26c82e7c3df3c4c6a9", "created_source": "", "popular_score": 0, "is_cooperation": 0, "code_complete_json": "https://static0.xesimg.com/programme/python_assets/dd0df7606df2cb6f03acdfd987cd08a6.json", "live_id": null, "template_project_id": null, "username": "\u90d1\u535a\u6587", "user_avatar": "https://static1.xesimg.com/udc-o-user-avatar/20210605/TalzR6mjcmPU7Ki_Q-YexqxpNw1812.png", "manual_weight": 1, "project_type": "compiler", "topic_id": "CP_51522861", "query": {}, "isGotRes": true, "args": [], "projectid": 51522861, "problemid": null, "planid": null, "next_template_project_id": "", "hide_filelist": false, "tabsListData": [{"id": "cb4b6868f9335d740486ea3b5cf928f0", "name": "main.py", "lang": "python", "type": "run", "content": "", "editable": true, "preview": true, "dataFormat": "py", "isLeaf": true, "mode": "client", "value": "", "originValue": "", "ext": "py", "disabled": true, "isActived": true, "isOpen": true, "sort": 2, "assetId": "cb4b6868f9335d740486ea3b5cf928f0", "color": "#FFA629", "icon": "iconfont iconpython", "isChange": false, "isDir": false, "isSelected": false, "level": 2, "loading": false, "md5ext": "cb4b6868f9335d740486ea3b5cf928f0.py", "operation": "uploadOk", "percentage": 100, "pid": 0, "preClick": false, "size": 380, "state": "uploadOk", "text": "main.py", "title": "main.py", "fileStatus": "normal", "svgId": "#iconpython", "cursor": {"row": 67, "column": 19}}], "activeTabData": {"id": "cb4b6868f9335d740486ea3b5cf928f0", "name": "main.py", "lang": "python", "type": "run", "content": "", "editable": true, "preview": true, "dataFormat": "py", "isLeaf": true, "mode": "client", "value": "", "originValue": "", "ext": "py", "disabled": true, "isActived": true, "isOpen": true, "sort": 2, "assetId": "cb4b6868f9335d740486ea3b5cf928f0", "color": "#FFA629", "icon": "iconfont iconpython", "isChange": false, "isDir": false, "isSelected": false, "level": 2, "loading": false, "md5ext": "cb4b6868f9335d740486ea3b5cf928f0.py", "operation": "uploadOk", "percentage": 100, "pid": 0, "preClick": false, "size": 380, "state": "uploadOk", "text": "main.py", "title": "main.py", "fileStatus": "normal", "svgId": "#iconpython", "cursor": {"row": 67, "column": 19}}, "indexFile": "", "cdns": [], "cursorsMap": {"cb4b6868f9335d740486ea3b5cf928f0": {"row": 67, "column": 19}}, "projectId": 51522861, "stuId": 16032923}